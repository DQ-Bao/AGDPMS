@page "/accounts"
@using Microsoft.AspNetCore.Components.Web
@using AGDPMS.Shared.Services
@inject IApiClient ApiClient
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Account List</PageTitle>

<div class="account-list-page">
    <div class="account-list-container">
        <div class="header">
            <h1>Account List</h1>
            <div class="actions">
                <a href="/" class="btn btn-secondary">Home</a>
                <button type="button" @onclick="() => _showAddForm = true" class="btn btn-primary">Add Account</button>
            </div>
        </div>

        @if (isLoading)
        {
            <div class="loading">Loading accounts...</div>
        }
        else if (!string.IsNullOrWhiteSpace(message))
        {
            <div class="error-message">@message</div>
        }
        else
        {
            <div class="table-container">
                <table class="accounts-table">
                    <thead>
                        <tr>
                            <th>Id</th>
                            <th>Full Name</th>
                            <th>Phone Number</th>
                            <th>Role</th>
                            <th>Need Change Password</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var user in _users)
                        {
                            <tr>
                                <td>@user.Id</td>
                                <td>@user.FullName</td>
                                <td>@user.PhoneNumber</td>
                                <td>@user.RoleName</td>
                                <td>@(user.NeedChangePassword ? "Yes" : "No")</td>
                                <td>
                                    <button @onclick="() => DeleteUser(user.Id)" class="btn btn-sm btn-danger">Delete</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }

        @if (_showAddForm)
        {
            <div class="add-form-container">
                <hr />
                <h4>Add an account</h4>
                <div class="form-group">
                    <label for="phoneNumber">Phone Number</label>
                    <input type="tel" id="phoneNumber" @bind="newUser.PhoneNumber" class="form-control" />
                </div>
                
                <div class="form-group">
                    <label for="fullName">Full Name</label>
                    <input type="text" id="fullName" @bind="newUser.FullName" class="form-control" />
                </div>
                
                <div class="form-group">
                    <label for="role">Role</label>
                    <select id="role" @bind="newUser.RoleId" class="form-control">
                        <option value="">Select a role</option>
                        @foreach (var role in _roles)
                        {
                            <option value="@role.Id">@role.Name</option>
                        }
                    </select>
                </div>
                
                @if (!string.IsNullOrWhiteSpace(addMessage))
                {
                    <div class="error-message">@addMessage</div>
                }
                
                <div class="form-actions">
                    <button @onclick="AddUser" class="btn btn-primary" disabled="@isAdding">
                        @if (isAdding)
                        {
                            <span>Adding...</span>
                        }
                        else
                        {
                            <span>Add Account</span>
                        }
                    </button>
                    <button @onclick="() => _showAddForm = false" class="btn btn-secondary">Cancel</button>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private IEnumerable<UserDto> _users = Array.Empty<UserDto>();
    private IEnumerable<RoleDto> _roles = Array.Empty<RoleDto>();
    private bool _showAddForm = false;
    private bool isLoading = true;
    private bool isAdding = false;
    private string? message;
    private string? addMessage;

    private UserDto newUser = new UserDto();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;
        message = null;
        
        try
        {
            var usersResult = await ApiClient.GetUsersAsync();
            var rolesResult = await ApiClient.GetRolesAsync();
            
            if (usersResult != null)
            {
                _users = usersResult;
            }
            
            if (rolesResult != null)
            {
                _roles = rolesResult;
            }
        }
        catch (Exception ex)
        {
            message = $"Failed to load data: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task AddUser()
    {
        addMessage = null;
        isAdding = true;
        
        try
        {
            if (string.IsNullOrWhiteSpace(newUser.PhoneNumber))
            {
                addMessage = "Phone number is required";
                return;
            }

            if (string.IsNullOrWhiteSpace(newUser.FullName))
            {
                addMessage = "Full name is required";
                return;
            }

            if (newUser.RoleId == 0)
            {
                addMessage = "Please select a role";
                return;
            }

            var result = await ApiClient.AddAccountAsync(new AddAccountRequest
            {
                PhoneNumber = newUser.PhoneNumber,
                FullName = newUser.FullName,
                RoleId = newUser.RoleId
            });

            if (result?.Success == true)
            {
                _showAddForm = false;
                newUser = new UserDto();
                await LoadData();
            }
            else
            {
                addMessage = result?.Message ?? "Account creation failed";
            }
        }
        catch (Exception ex)
        {
            addMessage = ex.Message;
        }
        finally
        {
            isAdding = false;
        }
    }

    private async Task DeleteUser(int userId)
    {
        // Implement delete functionality
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this user?"))
        {
            try
            {
                var result = await ApiClient.DeleteUserAsync(userId);
                if (result?.Success == true)
                {
                    await LoadData();
                }
                else
                {
                    message = result?.Message ?? "Failed to delete user";
                }
            }
            catch (Exception ex)
            {
                message = ex.Message;
            }
        }
    }
}
