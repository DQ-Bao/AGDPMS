@page "/reset-password/{ResetToken}"
@using Microsoft.AspNetCore.Components.Web
@using AGDPMS.Shared.Services
@inject IApiClient ApiClient
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<div class="reset-password-page">
    <div class="reset-password-container">
        <h1>Reset Password</h1>
        <p>Reset your password.</p>
        
        <div class="form-group">
            <label for="newPassword">New Password</label>
            <input type="password" id="newPassword" @bind="newPassword" class="form-control" />
        </div>
        
        <div class="form-group">
            <label for="confirmPassword">Confirm Password</label>
            <input type="password" id="confirmPassword" @bind="confirmPassword" class="form-control" />
        </div>
        
        @if (!string.IsNullOrWhiteSpace(message))
        {
            <div class="error-message">@message</div>
        }
        
        <button @onclick="Submit" class="btn btn-primary" disabled="@isLoading">
            @if (isLoading)
            {
                <span>Submitting...</span>
            }
            else
            {
                <span>Submit</span>
            }
        </button>
        
        <button @onclick="Back" class="btn btn-secondary">Back</button>
    </div>
</div>

@code {
    [Parameter] public string ResetToken { get; set; } = string.Empty;
    
    private string newPassword = string.Empty;
    private string confirmPassword = string.Empty;
    private string? message;
    private bool isLoading = false;

    private async Task Submit()
    {
        message = null;
        
        if (string.IsNullOrWhiteSpace(newPassword))
        {
            message = "Password is required";
            return;
        }

        if (newPassword != confirmPassword)
        {
            message = "Passwords do not match";
            return;
        }

        isLoading = true;
        
        try
        {
            var result = await ApiClient.ResetPasswordAsync(new ResetPasswordWithTokenRequest
            {
                Token = ResetToken,
                NewPassword = newPassword,
                ConfirmPassword = confirmPassword
            });

            if (result?.Success == true)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Password reset successfully");
                Navigation.NavigateTo("/login");
            }
            else
            {
                message = result?.Message ?? "Password reset failed";
            }
        }
        catch (Exception ex)
        {
            message = ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }

    private void Back()
    {
        Navigation.NavigateTo("/forgot-password");
    }
}
