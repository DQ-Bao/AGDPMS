@page "/pdf-select"
@rendermode InteractiveServer

@using AGDPMS.Web.Services

@inject IPdfToImageService PdfToImageService

<div class="container py-4">
    <div class="card shadow-sm border-0 mb-4">
        <div class="card-body">
            <h3 class="card-title mb-3">
                <i class="bi bi-file-earmark-pdf text-danger me-2"></i>
                PDF Viewer (using PDFtoImage)
            </h3>

            <div class="d-flex flex-column flex-sm-row align-items-start gap-3">
                <InputFile OnChange="OnInputFileChange" accept="application/pdf" class="form-control w-auto" />

                @if (isWorking)
                {
                    <div class="spinner-border text-primary ms-2" role="status">
                        <span class="visually-hidden">Rendering PDF...</span>
                    </div>
                }

                @if (current != null)
                {
                    <button class="btn btn-outline-danger btn-sm ms-sm-auto" @onclick="Clear">
                        <i class="bi bi-trash me-1"></i> Clear Images
                    </button>
                }
            </div>
        </div>
    </div>

    @if (isWorking)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Rendering...</span>
            </div>
            <p class="mt-3 text-muted">Rendering PDF… please wait.</p>
        </div>
    }

    @if (current != null && !isWorking)
    {
        <div class="alert alert-info">
            <i class="bi bi-check-circle me-2"></i>
            Rendered <strong>@current.PageImageUrls.Count</strong> page(s)
        </div>

        <div class="pdf-pages d-flex flex-column align-items-center gap-4">
            @for (int i = 0; i < current.PageImageUrls.Count; i++)
            {
                <div class="card border-0 shadow-sm" style="max-width:900px;">
                    <div class="card-body p-2 text-center">
                        <img src="@current.PageImageUrls[i]" class="img-fluid rounded" alt="PDF page" />
                        <p class="text-muted small mt-2 mb-0">Page @(i + 1)</p>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    private bool isWorking = false;
    private PdfToImageResult? current;

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file == null) return;
        isWorking = true;
        try
        {
            using var ms = new MemoryStream();
            await file.OpenReadStream(maxAllowedSize: 50 * 1024 * 1024).CopyToAsync(ms);
            ms.Seek(0, SeekOrigin.Begin);

            current = await PdfToImageService.ConvertPdfToPngImagesAsync(ms, file.Name);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        finally
        {
            isWorking = false;
        }
    }

    private async Task Clear()
    {
        if (current != null)
        {
            await PdfToImageService.CleanupAsync(current.Id);
            current = null;
        }
    }
}