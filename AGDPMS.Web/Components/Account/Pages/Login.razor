@page "/login"

@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Authentication
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using AGDPMS.Web.Data

@inject NavigationManager Nav
@inject UserDataAccess UserDataAccess
@inject IPasswordHasher<AppUser> PasswordHasher

<PageTitle>Login</PageTitle>

<h3>Login</h3>

@if (!string.IsNullOrEmpty(Message))
{
    <div>@Message</div>
}

<EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
    <DataAnnotationsValidator />
    <hr />
    <ValidationSummary />
    <div>
        <label>Phone Number</label>
        <InputText @bind-Value="Input.PhoneNumber" />
    </div>
    <div>
        <label>Password</label>
        <InputText @bind-Value="Input.Password" Type="password" />
    </div>
    <a href="/forgot-password">Forgot password?</a>
    <button type="submit">Login</button>
</EditForm>

@code {
    [SupplyParameterFromForm]
    private LoginModel Input { get; set; } = new();

    [CascadingParameter]
    public HttpContext HttpContext { get; set; } = default!;

    private string? Message = string.Empty;

    public async Task LoginUser(EditContext context)
    {
        var user = await UserDataAccess.GetByPhoneNumberAsync(Input.PhoneNumber);
        if (user is null)
        {
            Message = "Invalid phone or password";
            return;
        }

        if (PasswordHasher.VerifyHashedPassword(user, user.PasswordHash, Input.Password) != PasswordVerificationResult.Success)
        {
            Message = "Invalid phone or password";
            return;
        }

        if (user.NeedChangePassword)
        {
            var limitClaims = new Claim[]
            {
                new(ClaimTypes.NameIdentifier, user.Id.ToString()),
                new(ClaimTypes.Name, user.PhoneNumber),
                new("NeedPasswordChange", user.NeedChangePassword.ToString()),
            };
            var limitIdentity = new ClaimsIdentity(limitClaims, Constants.AuthScheme);
            var limitPrincipal = new ClaimsPrincipal(limitIdentity);
            await HttpContext.SignInAsync(Constants.AuthScheme, limitPrincipal);
            Nav.NavigateTo("/need-change-password", forceLoad: true);
            return;
        }

        var claims = user.ToClaims();
        var identity = new ClaimsIdentity(claims, Constants.AuthScheme);
        var principal = new ClaimsPrincipal(identity);
        var authProps = new AuthenticationProperties
        {
            IsPersistent = true
        };

        await HttpContext.SignInAsync(Constants.AuthScheme, principal, authProps);
        Nav.NavigateTo("/");
    }

    public class LoginModel
    {
        [Required]
        [Display(Name = "Phone Number")]
        public string PhoneNumber { get; set; } = string.Empty;

        [Required, DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = string.Empty;
    }
}
