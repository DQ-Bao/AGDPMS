@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using AGDPMS.Web.Data
@using AGDPMS.Web.Services

@inject UserDataAccess UserDataAccess
@inject IPasswordHasher<AppUser> PasswordHasher
@inject ISmsSender SmsSender

@if (!string.IsNullOrEmpty(Message))
{
    <p>@Message</p>
}
<EditForm Model="Input" method="post" OnValidSubmit="HandleAddAccount" FormName="add-account">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div>
        <label for="Input.PhoneNumber">Phone Number</label>
        <InputText @bind-Value="Input.PhoneNumber" id="Input.PhoneNumber" />
    </div>
    <div>
        <label for="Input.FullName">Full Name</label>
        <InputText @bind-Value="Input.FullName" id="Input.FullName" />
    </div>
    <div>
        <label for="Input.RoleId">Role</label>
        <InputSelect @bind-Value="Input.RoleId" id="Input.RoleId">
            @foreach (var role in Roles)
            {
                <option value="@role.Id">@role.Name</option>
            }
        </InputSelect>
    </div>
    <button type="button" @onclick="() => OnCancel.InvokeAsync()">Cancel</button>
    <button type="submit">Create Account</button>
</EditForm>

@code {
    [Parameter] public IEnumerable<AppRole> Roles { get; set; } = [];
    [Parameter] public EventCallback<AppUser> OnAccountAdded { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    private string? Message;

    private async Task HandleAddAccount()
    {
        var role = Roles.FirstOrDefault(r => r.Id == Input.RoleId);
        if (role is null)
        {
            Message = "Invalid role selected";
            return;
        }

        var user = new AppUser
        {
            PhoneNumber = Input.PhoneNumber,
            FullName = Input.FullName,
            Role = role,
        };

        user.PasswordHash = PasswordHasher.HashPassword(user, "abc123");
        try
        {
            await UserDataAccess.CreateAsync(user);
            Message = "Add account successfully";
            await SmsSender.SendAsync("Account added. Default password: abc123", [user.PhoneNumber]);
            await OnAccountAdded.InvokeAsync(user);
        } catch (Exception e)
        {
            Message = e.Message;
        }
    }

    private sealed class InputModel
    {
        [Required, Phone]
        public string PhoneNumber { get; set; } = string.Empty;

        [Required]
        public string FullName { get; set; } = string.Empty;

        [Required]
        public int RoleId { get; set; }
    }
}
