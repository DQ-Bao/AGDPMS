@page "/reset-password/{Token}"

@using System.ComponentModel.DataAnnotations
@using Microsoft.Extensions.Caching.Memory
@using Microsoft.AspNetCore.Identity
@using AGDPMS.Web.Data

@inject UserDataAccess UserDataAccess
@inject IPasswordHasher<AppUser> PasswordHasher
@inject IMemoryCache Cache
@inject NavigationManager Nav;

<PageTitle>Reset Password</PageTitle>

<h2>ResetPassword</h2>
<h3>Reset your password.</h3>
@if (!string.IsNullOrEmpty(Message))
{
    <p>@Message</p>
}
<hr />

@if (_userId is not null)
{
    <EditForm Model="Input" OnValidSubmit="HandleResetPassword" method="post" FormName="reset-password">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div>
            <label for="Input.Password">New Password</label>
            <InputText type="password" @bind-Value="Input.Password" id="Input.Password" />
        </div>
        <div>
            <label for="Input.ConfirmPassword">Confirm Password</label>
            <InputText type="password" @bind-Value="Input.ConfirmPassword" id="Input.ConfirmPassword" />
        </div>
        <button type="submit">Submit</button>
    </EditForm>
}
else
{
    <p>Invalid or expired reset link. <a href="/forgot-password">Try again</a>.</p>
}

@code {
    [Parameter]
    public string Token { get; set; } = string.Empty;

    private int? _userId;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    private string? Message { get; set; }

    protected override void OnInitialized()
    {
        if (Cache.TryGetValue($"reset:{Token}", out int userId))
            _userId = userId;
    }

    private async Task HandleResetPassword()
    {
        if (_userId is null)
        {
            Message = "Invalid Operation";
            return;
        }
        var user = await UserDataAccess.GetByIdAsync(_userId.Value);
        if (user is null)
        {
            Message = "User not found";
            return;
        }
        var hash = PasswordHasher.HashPassword(user, Input.Password);
        await UserDataAccess.SetPasswordHashAsync(user.Id, hash, needChange: false);
        Cache.Remove($"reset:{Token}");
        Nav.NavigateTo("/login");
    }

    private sealed class InputModel
    {
        [Required, MinLength(6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = string.Empty;

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}
