@page "/need-change-password"

@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.Extensions.Caching.Memory
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using AGDPMS.Web.Data

@attribute [Authorize]

@inject UserDataAccess UserDataAccess
@inject IPasswordHasher<AppUser> PasswordHasher
@inject NavigationManager Nav
@inject IMemoryCache Cache

<h3>NeedChangePassword</h3>

@if (!string.IsNullOrEmpty(Message))
{
    <p>@Message</p>
}

<EditForm Model="Input" OnValidSubmit="HandleChangePassword" method="post" FormName="need-change-password">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div>
        <label>New Password</label>
        <InputText @bind-Value="Input.NewPassword" type="password" />
    </div>
    <button type="submit">Change Password</button>
</EditForm>

@code {
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    private string? Message;

    [CascadingParameter]
    public HttpContext HttpContext { get; set; } = default!;

    private async Task HandleChangePassword()
    {
        var userIdClaim = HttpContext.User.FindFirstValue(ClaimTypes.NameIdentifier);
        if (string.IsNullOrEmpty(userIdClaim))
        {
            Message = "Unauthorized";
            return;
        }

        if (!int.TryParse(userIdClaim, out var userId))
        {
            Message = "Unauthorized";
            return;
        }

        var user = await UserDataAccess.GetByIdAsync(userId);
        if (user is null)
        {
            Message = "User not found";
            return;
        }

        var hash = PasswordHasher.HashPassword(user, Input.NewPassword);
        await UserDataAccess.SetPasswordHashAsync(user.Id, hash, needChange: false);

        var token = Guid.NewGuid().ToString("N");
        Cache.Set($"signin:{token}", user.Id, TimeSpan.FromMinutes(5));
        var callbackUrl = $"/api/auth/callback?token={token}&returnUrl={Uri.EscapeDataString("/")}";
        Nav.NavigateTo(callbackUrl, forceLoad: true);
    }

    private class InputModel
    {
        [Required, MinLength(6)]
        [DataType(DataType.Password)]
        public string NewPassword { get; set; } = string.Empty;
    }
}
