@page "/reset-password/{Token}"
@layout AuthLayout

@using System.ComponentModel.DataAnnotations
@using AGDPMS.Shared.Components.Account.Layout
@using AGDPMS.Shared.Services

@inject IAuthService Auth
@inject NavigationManager Nav

<PageTitle>Reset Password</PageTitle>

<h3>Reset your password.</h3>
<EditForm Model="Input" OnValidSubmit="HandleResetPassword" method="post" FormName="reset-password">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="mb-3">
        <label for="Input.Password" class="form-label">New Password</label>
        <InputText type="password" @bind-Value="Input.Password" id="Input.Password" class="form-control" />
        <ValidationMessage For="@(() => Input.Password)" />
    </div>
    <div class="mb-3">
        <label for="Input.ConfirmPassword" class="form-label">Confirm Password</label>
        <InputText type="password" @bind-Value="Input.ConfirmPassword" id="Input.ConfirmPassword" class="form-control" />
        <ValidationMessage For="@(() => Input.ConfirmPassword)" />
    </div>
    <button type="submit" class="btn btn-primary px-4" disabled="@IsLoading">
        @if (IsLoading)
        {
            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
            <text>Submitting...</text>
        }
        else
        {
            <text>Submit</text>
        }
    </button>
    @if (!string.IsNullOrEmpty(Message))
    {
        <div class="alert alert-danger mt-3">@Message</div>
    }
</EditForm>

@code {
    [Parameter]
    public string Token { get; set; } = string.Empty;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    private string? Message { get; set; }
    private bool IsLoading = false;

    private async Task HandleResetPassword()
    {
        Message = string.Empty;
        IsLoading = true;
        var result = await Auth.ResetPasswordWithTokenAsync(Token, Input.Password);
        IsLoading = false;
        if (result.Success) Nav.NavigateTo("/login");
        else Message = result.ErrorMessage ?? "Something went wrong";
    }

    private sealed class InputModel
    {
        [Required, MinLength(6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = string.Empty;

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}
