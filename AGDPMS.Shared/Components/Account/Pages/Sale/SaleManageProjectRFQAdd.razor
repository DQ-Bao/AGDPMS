@page "/sale/projectrfq/add"
@rendermode InteractiveServer

@using AGDPMS.Shared.Models
@using AGDPMS.Shared.Services
@using System.ComponentModel.DataAnnotations
@inject NavigationManager NavManager
@inject ISaleServices SaleService
@inject IFileStorageService FileStorageService

<PageTitle>Tạo mới dự án RFQ</PageTitle>

<h4 class="fw-bold py-3 mb-4"><span class="text-muted fw-light">Quản lý / Dự án RFQ /</span> Tạo mới</h4>

@if (customers == null)
{
    <div class="p-3">Đang tải danh sách khách hàng...</div>
}
else
{
    <EditForm Model="@project" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator />

        <div class="card">
            <h5 class="card-header">Thông tin dự án mới</h5>
            <div class="card-body">

                <div class="row">
                    <div class="mb-3 col-md-6">
                        <label for="projectName" class="form-label">Tên dự án</label>
                        <InputText id="projectName" class="form-control" @bind-Value="project.ProjectRFQName" />
                        <ValidationMessage For="@(() => project.ProjectRFQName)" />
                    </div>
                    <div class="mb-3 col-md-6">
                        <label for="location" class="form-label">Địa điểm</label>
                        <InputText id="location" class="form-control" @bind-Value="project.Location" />
                        <ValidationMessage For="@(() => project.Location)" />
                    </div>
                </div>
                <div class="row">
                    <div class="mb-3 col-md-6">
                        <label for="clientId" class="form-label">Khách hàng</label>
                        <InputSelect id="clientId" class="form-select" @bind-Value="project.ClientId">
                            <option value="0">-- Chọn khách hàng --</option>
                            @foreach (var customer in customers)
                            {
                                <option value="@customer.Id">@customer.Name</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => project.ClientId)" />
                    </div>
                    <div class="mb-3 col-md-6">
                        <label for="designCompany" class="form-label">Công ty thiết kế</label>
                        <InputText id="designCompany" class="form-control" @bind-Value="project.DesignCompany" />
                        <ValidationMessage For="@(() => project.DesignCompany)" />
                    </div>
                </div>
                <div class="row">
                    <div class="mb-3 col-md-6">
                        <label for="completionDate" class="form-label">Ngày hoàn thành</label>
                        <InputDate id="completionDate" class="form-control" @bind-Value="project.CompletionDate" />
                        <ValidationMessage For="@(() => project.CompletionDate)" />
                    </div>
                    <div class="mb-3 col-md-6">
                        <label for="status" class="form-label">Trạng thái</label>
                        <InputSelect id="status" class="form-select" @bind-Value="project.Status">
                            @foreach (var status in (ProjectRFQStatus[])Enum.GetValues(typeof(ProjectRFQStatus)))
                            {
                                <option value="@status">@GetVietnameseStatus(status)</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => project.Status)" />
                    </div>
                </div>

                <div class="mb-3">
                    <label for="designFile" class="form-label">File thiết kế (PDF, DOCX - Tối đa 100MB)</label>
                    <InputFile id="designFile" class="form-control" OnChange="HandleDesignFileSelected" />
                    @if (isUploadingDesignFile)
                    {
                        <div class="mt-2 small text-info">
                            <i class="bx bx-loader bx-spin"></i> Đang tải lên...
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(savedDesignFilePath))
                    {
                        <div class="mt-2 small text-success">
                            <i class="bx bx-check"></i> Đã tải lên: @Path.GetFileName(savedDesignFilePath)
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(designFileError))
                    {
                        <div class="text-danger small mt-1">@designFileError</div>
                    }
                </div>

                <div class="mb-3">
                    <label for="document" class="form-label">Tài liệu (PDF, DOCX - Tối đa 10MB)</label>
                    <InputFile id="document" class="form-control" OnChange="HandleDocumentSelected" />
                    @if (isUploadingDocument)
                    {
                        <div class="mt-2 small text-info">
                            <i class="bx bx-loader bx-spin"></i> Đang tải lên...
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(savedDocumentPath))
                    {
                        <div class="mt-2 small text-success">
                            <i class="bx bx-check"></i> Đã tải lên: @Path.GetFileName(savedDocumentPath)
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(documentFileError))
                    {
                        <div class="text-danger small mt-1">@documentFileError</div>
                    }
                </div>

                @if (!string.IsNullOrEmpty(submitErrorMessage))
                {
                    <div class="alert alert-danger" role="alert">
                        @submitErrorMessage
                    </div>
                }

            </div>
            <div class="card-footer">
                <button type="submit" class="btn btn-primary me-2" disabled="@isSubmitting">
                    @if (isSubmitting)
                    {
                        <span>
                            <i class="bx bx-loader bx-spin"></i> Đang lưu...
                        </span>
                    }
                    else
                    {
                        <span>Lưu</span>
                    }
                </button>
                <button type="button" class="btn btn-outline-secondary" @onclick="GoBack" disabled="@isSubmitting">Hủy</button>
            </div>
        </div>
    </EditForm>
}

@code {
    private AppRFQ project = new()
    {
        CompletionDate = DateTime.Now,
        CreatedAt = DateTime.Now,
        Status = ProjectRFQStatus.Pending
    };

    private List<AppClient>? customers;

    private string? submitErrorMessage;

    private string? designFileError;
    private string? documentFileError;
    private string? savedDesignFilePath;
    private string? savedDocumentPath;

    private bool isUploadingDesignFile = false;
    private bool isUploadingDocument = false;
    private bool isSubmitting = false;

    [SupplyParameterFromQuery(Name = "clientId")]
    public int ClientIdFromQuery { get; set; }

    private readonly string[] allowedExtensions = new[] { ".pdf", ".docx", ".jpg", ".png", ".jpeg" };
    private long maxFileSize = 100 * 1024 * 1024; // 100MB 

    protected override async Task OnInitializedAsync()
    {
        customers = (await SaleService.GetClientsAsync(null, 1, 9999))?.Items.ToList();

        if (ClientIdFromQuery > 0)
        {
            project.ClientId = ClientIdFromQuery;
        }
    }

    private async Task HandleDesignFileSelected(InputFileChangeEventArgs e)
    {
        isUploadingDesignFile = true;
        designFileError = null;
        StateHasChanged(); // Force UI update to show loading

        try
        {
            var file = e.File;
            if (file == null) return;

            savedDesignFilePath = await FileStorageService.SaveFileAsync(
                file, "designs", allowedExtensions, maxFileSize);

            designFileError = null;
        }
        catch (Exception ex)
        {
            designFileError = ex.Message;
            savedDesignFilePath = null;
        }
        finally
        {
            isUploadingDesignFile = false;
            StateHasChanged(); // Force UI update to hide loading
        }
    }

    private async Task HandleDocumentSelected(InputFileChangeEventArgs e)
    {
        isUploadingDocument = true;
        documentFileError = null;
        StateHasChanged(); // Force UI update to show loading

        try
        {
            var file = e.File;
            if (file == null) return;

            savedDocumentPath = await FileStorageService.SaveFileAsync(
                file, "documents", allowedExtensions, maxFileSize);

            documentFileError = null;
        }
        catch (Exception ex)
        {
            documentFileError = ex.Message;
            savedDocumentPath = null;
        }
        finally
        {
            isUploadingDocument = false;
            StateHasChanged(); // Force UI update to hide loading
        }
    }

    private async Task HandleSubmit()
    {
        if (isSubmitting) return;

        isSubmitting = true;
        submitErrorMessage = null;
        StateHasChanged(); // Force UI update

        try
        {
            // Kiểm tra lỗi file
            if (!string.IsNullOrEmpty(designFileError) || !string.IsNullOrEmpty(documentFileError))
            {
                submitErrorMessage = "Vui lòng sửa lỗi tải file trước khi lưu.";
                return;
            }

            // Gán đường dẫn file vào model
            project.DesignFilePath = savedDesignFilePath;
            project.DocumentPath = savedDocumentPath;

            await SaleService.CreateProjectRFQAsync(project);
            GoBack();
        }
        catch (Exception ex)
        {
            submitErrorMessage = $"Lỗi khi lưu dự án: {ex.Message}";
            Console.WriteLine(submitErrorMessage);
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged(); // Force UI update
        }
    }

    private void GoBack()
    {
        NavManager.NavigateTo("/sale/projectrfq");
    }

    private string GetVietnameseStatus(ProjectRFQStatus status)
    {
        return status switch
        {
            ProjectRFQStatus.Active => "Hoạt động",
            ProjectRFQStatus.Completed => "Hoàn thành",
            ProjectRFQStatus.Pending => "Đang chờ",
            ProjectRFQStatus.Scheduled => "Đã lên lịch",
            _ => status.ToString()
        };
    }
}