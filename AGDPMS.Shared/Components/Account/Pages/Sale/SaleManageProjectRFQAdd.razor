@page "/sale/projectrfq/add"
@rendermode InteractiveServer 

@using AGDPMS.Shared.Models
@using AGDPMS.Shared.Services 
@using System.ComponentModel.DataAnnotations
@inject NavigationManager NavManager
@inject ISaleServices SaleService

<PageTitle>Tạo mới dự án RFQ</PageTitle>

<h4 class="fw-bold py-3 mb-4"><span class="text-muted fw-light">Quản lý / Dự án RFQ /</span> Tạo mới</h4>

@if (customers == null)
{
    <div class="p-3">Đang tải danh sách khách hàng...</div>
}
else
{
    <EditForm Model="@project" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator />

        <div class="card">
            <h5 class="card-header">Thông tin dự án mới</h5>
            <div class="card-body">

                <div class="row">
                    <div class="mb-3 col-md-6">
                        <label for="projectName" class="form-label">Tên dự án</label>
                        <InputText id="projectName" class="form-control" @bind-Value="project.ProjectRFQName" />
                        <ValidationMessage For="@(() => project.ProjectRFQName)" />
                    </div>
                    <div class="mb-3 col-md-6">
                        <label for="location" class="form-label">Địa điểm</label>
                        <InputText id="location" class="form-control" @bind-Value="project.Location" />
                        <ValidationMessage For="@(() => project.Location)" />
                    </div>
                </div>

                <div class="row">
                    <div class="mb-3 col-md-6">
                        <label for="clientId" class="form-label">Khách hàng</label>
                        <InputSelect id="clientId" class="form-select" @bind-Value="project.ClientId">
                            <option value="0">-- Chọn khách hàng --</option>
                            @foreach (var customer in customers)
                            {
                                <option value="@customer.Id">@customer.Name</option>
                            }
                        </InputSelect>
                         <ValidationMessage For="@(() => project.ClientId)" />
                    </div>
                    <div class="mb-3 col-md-6">
                        <label for="designCompany" class="form-label">Công ty thiết kế</label>
                        <InputText id="designCompany" class="form-control" @bind-Value="project.DesignCompany" />
                    </div>
                </div>

                <div class="row">
                    <div class="mb-3 col-md-6">
                        <label for="completionDate" class="form-label">Ngày hoàn thành</label>
                        <InputDate id="completionDate" class="form-control" @bind-Value="project.CompletionDate" />
                         <ValidationMessage For="@(() => project.CompletionDate)" />
                    </div>
                    <div class="mb-3 col-md-6">
                        <label for="status" class="form-label">Trạng thái</label>
                        <InputSelect id="status" class="form-select" @bind-Value="project.Status">
                            @foreach (var status in (ProjectRFQStatus[])Enum.GetValues(typeof(ProjectRFQStatus)))
                            {
                                <option value="@status">@GetVietnameseStatus(status)</option>
                            }
                        </InputSelect>
                    </div>
                </div>

                <div class="mb-3">
                    <label for="designFile" class="form-label">File thiết kế (Tải lên 1 file)</label>
                    <InputFile id="designFile" class="form-control" OnChange="HandleDesignFileSelected" />
                    @* TODO: Display selected file name if needed *@
                </div>

                <div class="mb-3">
                    <label for="document" class="form-label">Tài liệu (Tải lên 1 file)</label>
                    <InputFile id="document" class="form-control" OnChange="HandleDocumentSelected" />
                     <ValidationMessage For="@(() => project.DocumentPath)" />
                    @* TODO: Display selected file name if needed *@
                </div>

            </div>
            <div class="card-footer">
                <button type="submit" class="btn btn-primary me-2">Lưu</button>
                <button type="button" class="btn btn-outline-secondary" @onclick="GoBack">Hủy</button>
            </div>
        </div>
    </EditForm>
}

@code {
    // Initialize with DateTime
    private AppRFQ project = new()
    {
        CompletionDate = DateTime.Now, // Use DateTime directly
        CreatedAt = DateTime.Now,
        Status = ProjectRFQStatus.Pending
    };

    private List<AppClient>? customers; // Make nullable

    // SỬA: Remove CompletionDateDateTime property

    // Load customers using Service
    protected override async Task OnInitializedAsync()
    {
        // Load the list of clients for the dropdown
        customers = (await SaleService.GetClientsAsync())?.ToList();
    }

    // TODO: Implement actual file saving logic
    private async Task HandleDesignFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            // For now, just store the name. Replace with actual upload logic.
            // Example: var savedPath = await FileUploadService.SaveFileAsync(file);
            // project.DesignFilePath = savedPath;
            project.DesignFilePath = file.Name; // Placeholder
            Console.WriteLine($"Selected Design File: {file.Name}");
        }
    }

    private async Task HandleDocumentSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
             // For now, just store the name. Replace with actual upload logic.
            // Example: var savedPath = await FileUploadService.SaveFileAsync(file);
            // project.DocumentPath = savedPath;
            project.DocumentPath = file.Name; // Placeholder
            Console.WriteLine($"Selected Document File: {file.Name}");
        }
    }

    // Use Service to save
    private async Task HandleSubmit()
    {
    
        if (project.ClientId == 0)
        {
            
             Console.WriteLine("Client selection is required.");
             return;
        }

        try
        {
             await SaleService.CreateProjectRFQAsync(project); 
             Console.WriteLine($"Đã lưu dự án mới: {project.ProjectRFQName}");
             GoBack();
        }
        catch(Exception ex)
        {
            Console.WriteLine($"Error saving project: {ex.Message}");
        }
    }

    private void GoBack()
    {
        NavManager.NavigateTo("/sale/projectrfq");
    }

    private string GetVietnameseStatus(ProjectRFQStatus status)
    {
        return status switch
        {
            ProjectRFQStatus.Active => "Hoạt động",
            ProjectRFQStatus.Completed => "Hoàn thành",
            ProjectRFQStatus.Pending => "Đang chờ",
            ProjectRFQStatus.Scheduled => "Đã lên lịch",
            _ => status.ToString()
        };
    }

}

