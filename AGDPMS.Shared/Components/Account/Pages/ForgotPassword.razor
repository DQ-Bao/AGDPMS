@page "/forgot-password"
@layout AuthLayout

@using System.ComponentModel.DataAnnotations
@using AGDPMS.Shared.Components.Layout
@using AGDPMS.Shared.Services

@inject IAuthService Auth
@inject NavigationManager Nav

<PageTitle>Forgot Password</PageTitle>

<h3 class="text-center mb-4">Forgot your password?</h3>
<p class="text-muted text-center mb-4">Enter phone number to send SMS message.</p>
<EditForm Model="Input" method="post" OnValidSubmit="HandleForgotPassword" FormName="forgot-password">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="mb-3">
        <label for="Input.Phone" class="form-label">Phone Number</label>
        <InputText @bind-Value="Input.Phone" id="Input.Phone" class="form-control" type="tel" inputmode="tel" />
        <ValidationMessage For="@(() => Input.Phone)" />
    </div>
    <div class="d-flex justify-content-between align-items-center mt-3">
        <a href="/login" class="text-decoration-none small">Cancel</a>
        <button type="submit" class="btn btn-primary px-4" disabled="@IsLoading">
            @if (IsLoading)
            {
                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                <text>Sending...</text>
            }
            else
            {
                <text>Send SMS</text>
            }
        </button>
    </div>
    @if (!string.IsNullOrEmpty(Message))
    {
        <div class="alert alert-danger mt-3">@Message</div>
    }
</EditForm>

@code {
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    private string? Message;
    private bool IsLoading = false;

    private async Task HandleForgotPassword()
    {
        Message = string.Empty;
        IsLoading = true;
        var result = await Auth.SendForgotPasswordCodeAsync(Input.Phone);
        IsLoading = false;
        if (result.Success) Nav.NavigateTo($"/verify-otp/{result.UserId}");
        else Message = result.ErrorMessage ?? "Something went wrong";
    }

    private sealed class InputModel
    {
        [Required, Phone]
        public string Phone { get; set; } = string.Empty;
    }
}
