@using System.ComponentModel.DataAnnotations
@using AGDPMS.Shared.Models
@using AGDPMS.Shared.Services
@using AGDPMS.Shared.Validations

@inject IUserService UserService

<h5 class="fw-bold mb-3">Change Password</h5>
@if (User is not null)
{
    <EditForm Model="@Input" method="post" OnValidSubmit="HandleChangePassword" FormName="change-password">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="mb-3">
            <label class="form-label fw-bold">Current Password</label>
            <InputText @bind-Value="@Input.CurrentPassword" class="form-control" type="password" />
            <ValidationMessage For="@(() => Input.CurrentPassword)" />
        </div>

        <div class="mb-3">
            <label class="form-label fw-bold">New Password</label>
            <InputText @bind-Value="@Input.NewPassword" class="form-control" type="password" />
            <ValidationMessage For="@(() => Input.NewPassword)" />
        </div>

        <div class="mb-3">
            <label class="form-label fw-bold">Confirm New Password</label>
            <InputText @bind-Value="@Input.ConfirmPassword" class="form-control" type="password" />
            <ValidationMessage For="@(() => Input.ConfirmPassword)" />
        </div>

        <div class="mt-4">
            <button type="submit" class="btn btn-warning w-100" disabled="@IsLoading">
                @if (IsLoading)
                {
                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                    <text>Changing...</text>
                }
                else
                {
                    <text>Change Password</text>
                }
            </button>
        </div>
        @if (!string.IsNullOrEmpty(SuccessMessage))
        {
            <div class="alert alert-success alert-dismissible fade show mt-3" role="alert">
                @SuccessMessage
                <button type="button" class="btn-close" @onclick="() => SuccessMessage = null"></button>
            </div>
        }
        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="alert alert-danger alert-dismissible fade show mt-3" role="alert">
                @ErrorMessage
                <button type="button" class="btn-close" @onclick="() => ErrorMessage = null"></button>
            </div>
        }
    </EditForm>
}

@code {
    [Parameter, EditorRequired] public AppUser? User { get; set; }
    [Parameter] public EventCallback OnPasswordChanged { get; set; }

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    private bool IsLoading = false;
    private string? ErrorMessage;
    private string? SuccessMessage;

    private async Task HandleChangePassword()
    {
        ErrorMessage = string.Empty;
        SuccessMessage = string.Empty;
        IsLoading = true;
        if (User is null) return;
        var result = await UserService.ChangePasswordAsync(User.Id, Input.CurrentPassword, Input.NewPassword);
        IsLoading = false;
        if (result.Success)
        {
            SuccessMessage = "Mật khẩu của bạn đã được thay đổi thành công.";
            Input = new();
            await OnPasswordChanged.InvokeAsync();
        }
        else ErrorMessage = result.ErrorMessage ?? "Unexpected error.";
    }

    private sealed class InputModel
    {
        [Required, DataType(DataType.Password)]
        public string CurrentPassword { get; set; } = string.Empty;

        [Required, DataType(DataType.Password), Password]
        public string NewPassword { get; set; } = string.Empty;

        [Required, DataType(DataType.Password)]
        [Compare(nameof(NewPassword), ErrorMessage = "Mật khẩu mới không khớp. Vui lòng thử lại.")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}
