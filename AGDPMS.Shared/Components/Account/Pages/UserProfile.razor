@page "/profile"
@rendermode InteractiveServer

@using System.ComponentModel.DataAnnotations
@using AGDPMS.Shared.Models
@using AGDPMS.Shared.Services
@using AGDPMS.Shared.Validations

@inject IUserService UserService

<div class="container-fluid py-4">
    <a href="/">Home</a>
    <h3 class="fw-bold mb-4">User Profile</h3>
    <div class="row justify-content-start">
        <div class="col-12 col-md-6">
            @if (IsCurrentUserLoading)
            {
                <div class="d-flex justify-content-center align-items-center" style="height: 200px;">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else if (User != null)
            {
                <EditForm Model="@Profile" method="post" OnValidSubmit="EditProfile" FormName="edit-profile">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="mb-3">
                        <label class="form-label fw-bold">Full Name</label>
                        <InputText @bind-Value="@Profile.FullName" class="form-control" />
                        <ValidationMessage For="@(() => Profile.FullName)" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label fw-bold">Email</label>
                        <InputText @bind-Value="@Profile.Email" class="form-control" type="email" inputmode="email" />
                        <ValidationMessage For="@(() => Profile.Email)" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label fw-bold">Phone Number</label>
                        <input class="form-control" value="@User.PhoneNumber" type="tel" inputmode="tel" disabled />
                    </div>

                    <div class="mb-3">
                        <label class="form-label fw-bold">Date of birth</label>
                        <InputDate @bind-Value="@Profile.DateOfBirth" class="form-control" />
                        <ValidationMessage For="@(() => Profile.DateOfBirth)" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label fw-bold">Role</label>
                        <input class="form-control" value="@User.Role.Name" disabled />
                    </div>

                    <div class="mb-3">
                        <label class="form-label fw-bold">Account Status</label>
                        <div>
                            <span class="badge @(User.IsActive ? "bg-success" : "bg-danger")">
                                @(User.IsActive ? "Active" : "Locked")
                            </span>
                        </div>
                    </div>

                    <div class="mt-4">
                        <button type="submit" class="btn btn-primary w-100" disabled="@IsProfileLoading">
                            @if (IsProfileLoading)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                <text>Submitting...</text>
                            }
                            else
                            {
                                <text>Edit Profile</text>
                            }
                        </button>
                    </div>
                    @if (!string.IsNullOrEmpty(SuccessMessage))
                    {
                        <div class="alert alert-success mt-3">@SuccessMessage</div>
                    }
                    @if (!string.IsNullOrEmpty(ErrorMessage))
                    {
                        <div class="alert alert-danger mt-3">@ErrorMessage</div>
                    }
                </EditForm>

                <hr class="my-5" />
                <h5 class="fw-bold mb-3">Change Password</h5>

                <EditForm Model="@ChangePassword" method="post" OnValidSubmit="HandleChangePassword" FormName="change-password">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-3">
                        <label class="form-label fw-bold">Current Password</label>
                        <InputText @bind-Value="@ChangePassword.CurrentPassword" class="form-control" type="password" />
                        <ValidationMessage For="@(() => ChangePassword.CurrentPassword)" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label fw-bold">New Password</label>
                        <InputText @bind-Value="@ChangePassword.NewPassword" class="form-control" type="password" />
                        <ValidationMessage For="@(() => ChangePassword.NewPassword)" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label fw-bold">Confirm New Password</label>
                        <InputText @bind-Value="@ChangePassword.ConfirmPassword" class="form-control" type="password" />
                        <ValidationMessage For="@(() => ChangePassword.ConfirmPassword)" />
                    </div>

                    <div class="mt-4">
                        <button type="submit" class="btn btn-warning w-100" disabled="@IsChangePasswordLoading">
                            @if (IsChangePasswordLoading)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                <text>Changing...</text>
                            }
                            else
                            {
                                <text>Change Password</text>
                            }
                        </button>
                    </div>
                    @if (!string.IsNullOrEmpty(SuccessMessage))
                    {
                        <div class="alert alert-success mt-3">@SuccessMessage</div>
                    }
                    @if (!string.IsNullOrEmpty(ErrorMessage))
                    {
                        <div class="alert alert-danger mt-3">@ErrorMessage</div>
                    }
                </EditForm>
            }
            else if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <div class="alert alert-danger mt-3">@ErrorMessage</div>
            }
        </div>
    </div>
</div>

@code {
    private AppUser? User { get; set; }

    [SupplyParameterFromForm]
    private UserProfileModel Profile { get; set; } = new();

    [SupplyParameterFromForm]
    private ChangePasswordModel ChangePassword { get; set; } = new();

    private string? SuccessMessage = string.Empty;
    private string? ErrorMessage = string.Empty;
    private bool IsCurrentUserLoading = true;
    private bool IsProfileLoading = false;
    private bool IsChangePasswordLoading = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var result = await UserService.GetCurrentUserAsync();
            if (result.Success)
            {
                User = result.User;
                if (User != null)
                {
                    Profile.FullName = User.FullName;
                    Profile.Email = User.Email;
                    Profile.DateOfBirth = User.DateOfBirth;
                }
            }
            else
            {
                ErrorMessage = result.ErrorMessage;
            }
            IsCurrentUserLoading = false;
            StateHasChanged();
        }
    }

    private async Task EditProfile()
    {
        ErrorMessage = string.Empty;
        IsProfileLoading = true;
        if (User is null) return;
        User.FullName = Profile.FullName;
        User.Email = Profile.Email;
        User.DateOfBirth = Profile.DateOfBirth;
        var result = await UserService.UpdateUserProfileAsync(User);
        IsProfileLoading = false;
        if (!result.Success)
        {
            ErrorMessage = result.ErrorMessage;
        }
        else
        {
            SuccessMessage = "Cập nhật thông tin thành công.";
        }
    }

    private async Task HandleChangePassword()
    {
        ErrorMessage = string.Empty;
        IsChangePasswordLoading = true;
        if (User is null) return;
        var result = await UserService.ChangePasswordAsync(User.Id, ChangePassword.CurrentPassword, ChangePassword.NewPassword);
        IsChangePasswordLoading = false;
        if (!result.Success)
        {
            ErrorMessage = result.ErrorMessage;
        }
        else
        {
            SuccessMessage = "Mật khẩu của bạn đã được thay đổi thành công.";
            ChangePassword = new();
        }
    }

    private sealed class UserProfileModel
    {
        [Required]
        public string FullName { get; set; } = string.Empty;

        [EmailAddress]
        public string? Email { get; set; }

        [BirthDay]
        public DateTime? DateOfBirth { get; set; }
    }

    private sealed class ChangePasswordModel
    {
        [Required, DataType(DataType.Password)]
        public string CurrentPassword { get; set; } = string.Empty;

        [Required, DataType(DataType.Password), Password]
        public string NewPassword { get; set; } = string.Empty;

        [Required, DataType(DataType.Password)]
        [Compare(nameof(NewPassword), ErrorMessage = "Mật khẩu mới không khớp. Vui lòng thử lại.")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}
