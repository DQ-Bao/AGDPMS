@page "/qa/machines"
@rendermode InteractiveServer
@implements IDisposable

@using AGDPMS.Shared.Models
@using AGDPMS.Shared.Services
@inject NavigationManager NavManager
@inject IQAService QAService

<PageTitle>Quản lý Máy móc</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h4 class="fw-bold py-3 mb-0"><span class="text-muted fw-light">QA /</span> Quản lý Máy móc</h4>
    <button class="btn btn-primary" @onclick="GoToCreatePage">
        <i class="bx bx-plus me-1"></i> Thêm máy mới
    </button>
</div>

<div class="mb-3">
    <input type="search" class="form-control" placeholder="Tìm kiếm theo tên máy, loại máy, trạng thái..."
           value="@searchTerm" @oninput="DebounceSearch" />
</div>

<div class="card">
    <h5 class="card-header">Danh sách Máy móc</h5>
    <div class="table-responsive text-nowrap">
        @if (isLoading)
        {
            <div class="p-3">Đang tải danh sách...</div>
        }
        else if (pagedResult == null || !pagedResult.Items.Any())
        {
            <div class="p-3">Không tìm thấy máy móc nào.</div>
        }
        else
        {
            <table class="table">
                <thead class="border-0">
                    <tr>
                        <th>Tên máy</th>
                        <th>Loại máy</th>
                        <th>Bảo trì cuối</th>
                        <th>Trạng thái</th>
                        <th>Hành động</th>
                    </tr>
                </thead>
                <tbody class="table-border-bottom-0">
                    @foreach (var machine in pagedResult.Items)
                    {
                        <tr>
                            <td>
                                <span @onclick="() => RequestEditName(machine)"
                                      style="cursor: pointer;"
                                      title="Sửa tên máy"
                                      class="d-inline-flex align-items-center">
                                    <strong>@machine.Name</strong>
                                    <i class="bx bx-pencil ms-1 text-muted small"></i>
                                </span>
                            </td>
                            <td>@machine.MachineType.Name</td>
                            <td>@machine.LastMaintenanceDate?.ToString("dd/MM/yyyy")</td>
                            <td>
                                <select class="form-select @GetStatusClass(machine.Status)"
                                        style="width: auto; min-width: 140px;"
                                        value="@machine.Status.ToString()"
                                        @onchange="(e) => OnStatusChange(e, machine.Id)">
                                    @foreach (var status in (MachineStatus[])Enum.GetValues(typeof(MachineStatus)))
                                    {
                                        <option value="@status" class="@GetStatusClass(status)">
                                            @GetVietnameseStatus(status)
                                        </option>
                                    }
                                </select>
                            </td>
                            <td>
                                <button class="btn btn-outline-danger"
                                        @onclick="() => RequestDeleteConfirmation(machine)" title="Xóa">
                                    <i class="bx bx-trash me-1"></i> Xóa
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>

    @if (pagedResult != null && pagedResult.TotalPages > 1)
    {
        <div class="card-footer d-flex justify-content-between align-items-center">
            <div>
                Trang @pagedResult.PageNumber / @pagedResult.TotalPages (Tổng: @pagedResult.TotalCount máy)
            </div>
            <nav aria-label="Page navigation">
                <ul class="pagination mb-0">
                    <li class="page-item @(pagedResult.HasPreviousPage ? "" : "disabled")">
                        <button class="page-link" @onclick="GoToPreviousPage" disabled="@(!pagedResult.HasPreviousPage)">
                            &laquo; Trước
                        </button>
                    </li>
                    <li class="page-item @(pagedResult.HasNextPage ? "" : "disabled")">
                        <button class="page-link" @onclick="GoToNextPage" disabled="@(!pagedResult.HasNextPage)">
                            Sau &raquo;
                        </button>
                    </li>
                </ul>
            </nav>
        </div>
    }
</div>

@if (showDeleteConfirmation && machineToDelete != null)
{
    <div class="modal-backdrop fade show"></div>
    <div class="modal fade show" tabindex="-1" style="display: block;" role="dialog">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Xác nhận Xóa</h5>
                    <button type="button" class="btn-close" @onclick="CancelDelete" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Bạn có chắc chắn muốn xóa máy: <strong>@machineToDelete.Name</strong> không?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelDelete">Hủy</button>
                    <button type="button" class="btn btn-danger" @onclick="ConfirmDelete">Xóa</button>
                </div>
            </div>
        </div>
    </div>
}

@if (showEditNameModal && machineToEditName != null)
{
    <div class="modal-backdrop fade show"></div>
    <div class="modal fade show" tabindex="-1" style="display: block;" role="dialog">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Đổi tên máy</h5>
                    <button type="button" class="btn-close" @onclick="CancelEditName" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <label for="newMachineName" class="form-label">Tên mới cho: <strong>@machineToEditName.Name</strong></label>
                    <input type="text" id="newMachineName" class="form-control" @bind="newMachineName" @bind:event="oninput" />
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelEditName">Hủy</button>
                    <button type="button" class="btn btn-primary" @onclick="ConfirmEditName">Lưu</button>
                </div>
            </div>
        </div>
    </div>
}

@if (showReasonModal && machineChangingStatus != null)
{
    <div class="modal-backdrop fade show"></div>
    <div class="modal fade show" tabindex="-1" style="display: block;" role="dialog">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Xác nhận Trạng thái</h5>
                    <button type="button" class="btn-close" @onclick="CancelFailureReason" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>
                        Xác nhận chuyển máy <strong>@machineChangingStatus.Name</strong> sang trạng thái:
                        <span class="badge @GetStatusClass(newStatusForMachine)">
                            @GetVietnameseStatus(newStatusForMachine)
                        </span>
                    </p>
                    <label for="failureReason" class="form-label">Vui lòng nhập lý do (lỗi là gì):</label>
                    <textarea id="failureReason" class="form-control" @bind="failureReason" @bind:event="oninput" rows="3"></textarea>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelFailureReason">Hủy</button>
                    <button type="button" class="btn btn-danger" @onclick="ConfirmFailureReason">Xác nhận</button>
                </div>
            </div>
        </div>
    </div>
}


@code {


    private PagedResult<AppMachine>? pagedResult;
    private bool isLoading = true;
    private string searchTerm = string.Empty;
    private int currentPage = 1;
    private int pageSize = 10;
    private System.Threading.Timer? searchTimer;

    private bool showDeleteConfirmation = false;
    private AppMachine? machineToDelete;

    private bool showEditNameModal = false;
    private AppMachine? machineToEditName;
    private string newMachineName = string.Empty;

    private bool showReasonModal = false;
    private AppMachine? machineChangingStatus;
    private MachineStatus newStatusForMachine;
    private string failureReason = string.Empty;


    protected override async Task OnInitializedAsync() { await LoadData(); }
    private async Task LoadData()
    {
        isLoading = true;
        pagedResult = await QAService.GetMachinesAsync(searchTerm, currentPage, pageSize);
        isLoading = false;
        StateHasChanged();
    }
    private void DebounceSearch(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
        searchTimer?.Dispose();
        searchTimer = new System.Threading.Timer(PerformSearch, null, 500, Timeout.Infinite);
    }
    private void PerformSearch(object? state) { currentPage = 1; InvokeAsync(LoadData); }
    private async Task GoToPreviousPage() { if (pagedResult?.HasPreviousPage ?? false) { currentPage--; await LoadData(); } }
    private async Task GoToNextPage() { if (pagedResult?.HasNextPage ?? false) { currentPage++; await LoadData(); } }

    private void RequestDeleteConfirmation(AppMachine machine) { machineToDelete = machine; showDeleteConfirmation = true; }
    private void CancelDelete() { machineToDelete = null; showDeleteConfirmation = false; }
    private async Task ConfirmDelete()
    {
        if (machineToDelete != null)
        {
            await QAService.DeleteMachineAsync(machineToDelete.Id);
            await LoadData();
        }
        machineToDelete = null;
        showDeleteConfirmation = false;
    }

    private void RequestEditName(AppMachine machine)
    {
        machineToEditName = machine;
        newMachineName = machine.Name;
        showEditNameModal = true;
    }

    private void CancelEditName()
    {
        machineToEditName = null;
        newMachineName = string.Empty;
        showEditNameModal = false;
    }

    private async Task ConfirmEditName()
    {
        if (machineToEditName != null && !string.IsNullOrWhiteSpace(newMachineName))
        {
            machineToEditName.Name = newMachineName;
            await QAService.UpdateMachineAsync(machineToEditName);
            await SendNotificationAsync(machineToEditName, "Tên đã được cập nhật.");

            StateHasChanged();
        }
        CancelEditName();
    }

    private void RequestFailureReason(AppMachine machine, MachineStatus newStatus)
    {
        machineChangingStatus = machine;
        newStatusForMachine = newStatus;
        failureReason = string.Empty;
        showReasonModal = true;
    }

    private void CancelFailureReason()
    {
        machineChangingStatus = null;
        failureReason = string.Empty;
        showReasonModal = false;

        InvokeAsync(LoadData);
    }

    private async Task ConfirmFailureReason()
    {
        if (machineChangingStatus != null)
        {
            machineChangingStatus.Status = newStatusForMachine;

            await SendNotificationAsync(machineChangingStatus, $"Báo cáo hỏng hóc/bảo trì: {failureReason}");

            await QAService.UpdateMachineAsync(machineChangingStatus);

            await LoadData();
        }

        machineChangingStatus = null;
        failureReason = string.Empty;
        showReasonModal = false;
    }

    private async Task SendNotificationAsync(AppMachine machine, string? reason)
    {
        // TODO: Tích hợp API gửi thông báo.
        Console.WriteLine($"GỬI THÔNG BÁO: Máy {machine.Name} (ID: {machine.Id})");
        Console.WriteLine($"   Trạng thái: {machine.Status}");
        Console.WriteLine($"   Lý do: {reason ?? "N/A"}");
        await Task.Delay(100);
    }

    private async Task OnStatusChange(ChangeEventArgs e, int machineId)
    {
        if (Enum.TryParse<MachineStatus>(e.Value.ToString(), out var newStatus))
        {
            var machineInList = pagedResult?.Items.FirstOrDefault(p => p.Id == machineId);
            if (machineInList == null) return;

            var oldStatus = machineInList.Status;
            if (oldStatus == newStatus) return;

            if (newStatus == MachineStatus.Operational && (oldStatus == MachineStatus.Broken || oldStatus == MachineStatus.NeedsMaintenance))
            {
                machineInList.Status = newStatus;
                machineInList.LastMaintenanceDate = DateTime.Now;

                StateHasChanged();

                await QAService.UpdateMachineAsync(machineInList);
                await SendNotificationAsync(machineInList, "Máy đã được sửa và quay lại hoạt động.");
            }
            else if (newStatus == MachineStatus.Broken || newStatus == MachineStatus.NeedsMaintenance)
            {
                RequestFailureReason(machineInList, newStatus);
            }
            else
            {
                machineInList.Status = newStatus;
                StateHasChanged();
                await QAService.UpdateMachineStatusAsync(machineId, newStatus);
                await SendNotificationAsync(machineInList, $"Trạng thái cập nhật: {GetVietnameseStatus(newStatus)}");
            }
        }
    }


    private void GoToCreatePage() => NavManager.NavigateTo("/qa/machines/add");
    // private void GoToEditPage(int id) => NavManager.NavigateTo($"/qa/machines/edit/{id}"); 

    private string GetStatusClass(MachineStatus status)
    {
        return status switch
        {
            MachineStatus.Operational => "bg-success text-white",
            MachineStatus.NeedsMaintenance => "bg-warning text-dark",
            MachineStatus.Broken => "bg-danger text-white",
            _ => "bg-secondary text-white"
        };
    }
    private string GetVietnameseStatus(MachineStatus status)
    {
        return status switch
        {
            MachineStatus.Operational => "Hoạt động",
            MachineStatus.NeedsMaintenance => "Cần bảo trì",
            MachineStatus.Broken => "Bị hỏng",
            _ => status.ToString()
        };
    }
    public void Dispose()
    {
        searchTimer?.Dispose();
    }
}