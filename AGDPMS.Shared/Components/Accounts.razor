@page "/accounts"
@using AGDPMS.Shared.Services
@using System.Text.RegularExpressions
@using System.Linq
@inject IApiClient ApiClient
@inject NavigationManager Navigation

<PageTitle>Account List</PageTitle>

<div class="account-list-page">
    <div class="account-list-container">
        <div class="header">
            <h1>Account List</h1>
            <div class="actions">
                <a href="/" class="btn btn-secondary">Home</a>
                <button type="button" @onclick="() => _showAddForm = true" class="btn btn-primary">Add Account</button>
            </div>
        </div>

        @if (isLoading)
        {
            <div class="loading">Loading accounts...</div>
        }
        else if (!string.IsNullOrWhiteSpace(message))
        {
            <div class="error-message">@message</div>
        }
        else
        {
            <div class="table-container">
                <table class="accounts-table">
                    <thead>
                        <tr>
                            <th>Id</th>
                            <th>Full Name</th>
                            <th>Phone Number</th>
                            <th>Role</th>
                            <th>Need Change Password</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var user in _users)
                        {
                            <tr>
                                <td>@user.Id</td>
                                <td>
                                    @if (editUser?.Id == user.Id)
                                    {
                                        <input @bind="editUser.FullName" />
                                    }
                                    else
                                    {
                                        @user.FullName
                                    }
                                </td>
                                <td>
                                    @if (editUser?.Id == user.Id)
                                    {
                                        <input @bind="editUser.PhoneNumber" />
                                    }
                                    else
                                    {
                                        @user.PhoneNumber
                                    }
                                </td>
                                <td>
                                    @if (editUser?.Id == user.Id)
                                    {
                                        <select @bind="editUser.RoleId">
                                            @foreach (var role in _roles)
                                            {
                                                <option value="@role.Id">@role.Name</option>
                                            }
                                        </select>
                                    }
                                    else
                                    {
                                        @user.RoleName
                                    }
                                </td>
                                <td>
                                    @if (editUser?.Id == user.Id)
                                    {
                                        <input type="checkbox" @bind="editUser.NeedChangePassword" />
                                    }
                                    else
                                    {
                                        @(user.NeedChangePassword ? "Yes" : "No")
                                    }
                                </td>
                                <td>
                                    @if (editUser?.Id == user.Id)
                                    {
                                        <button class="btn btn-sm btn-primary" @onclick="SaveEdit">Save</button>
                                        <button class="btn btn-sm btn-secondary" @onclick="CancelEdit">Cancel</button>
                                    }
                                    else
                                    {
                                        <button class="btn btn-sm btn-secondary" @onclick="() => StartEdit(user)">Edit</button>
                                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteUser(user.Id)">Delete</button>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }

        @if (_showAddForm)
        {
            <div class="add-form-container">
                <hr />
                <h4>Add an account</h4>
                <div class="form-group">
                    <label for="phoneNumber">Phone Number</label>
                    <input type="tel" id="phoneNumber" value="@newUser.PhoneNumber" inputmode="tel" pattern="\+?\d{10,15}" maxlength="15" @oninput="OnPhoneInput" class="form-control" />
                </div>
                
                <div class="form-group">
                    <label for="fullName">Full Name</label>
                    <input type="text" id="fullName" @bind="newUser.FullName" class="form-control" />
                </div>
                
                <div class="form-group">
                    <label for="role">Role</label>
                    <select id="role" @bind="newUser.RoleId" class="form-control">
                        <option value="">Select a role</option>
                        @foreach (var role in _roles)
                        {
                            <option value="@role.Id">@role.Name</option>
                        }
                    </select>
                </div>
                
                @if (!string.IsNullOrWhiteSpace(addMessage))
                {
                    <div class="error-message">@addMessage</div>
                }
                
                <div class="form-actions">
                    <button @onclick="AddUser" class="btn btn-primary" disabled="@isAdding">
                        @if (isAdding)
                        {
                            <span>Adding...</span>
                        }
                        else
                        {
                            <span>Add Account</span>
                        }
                    </button>
                    <button @onclick="() => _showAddForm = false" class="btn btn-secondary">Cancel</button>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private IEnumerable<UserDto> _users = Array.Empty<UserDto>();
    private IEnumerable<RoleDto> _roles = Array.Empty<RoleDto>();
    private bool _showAddForm = false;
    private bool isLoading = true;
    private bool isAdding = false;
    private string? message;
    private string? addMessage;

    private UserDto newUser = new UserDto();
    private UserDto? editUser;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;
        message = null;
        
        try
        {
            var usersResult = await ApiClient.GetUsersAsync();
            var rolesResult = await ApiClient.GetRolesAsync();
            
            if (usersResult != null)
            {
                _users = usersResult;
            }
            
            if (rolesResult != null)
            {
                _roles = rolesResult;
            }
        }
        catch (Exception ex)
        {
            message = $"Failed to load data: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task AddUser()
    {
        addMessage = null;
        isAdding = true;
        
        try
        {
            newUser.PhoneNumber = newUser.PhoneNumber?.Trim();
            newUser.FullName = newUser.FullName?.Trim();

            if (string.IsNullOrWhiteSpace(newUser.PhoneNumber))
            {
                addMessage = "Phone number is required";
                return;
            }

            if (!IsValidPhone(newUser.PhoneNumber))
            {
                addMessage = "Invalid phone number. Use digits with optional leading +, 10-15 digits.";
                return;
            }

            if (string.IsNullOrWhiteSpace(newUser.FullName))
            {
                addMessage = "Full name is required";
                return;
            }

            if (newUser.RoleId == 0)
            {
                addMessage = "Please select a role";
                return;
            }

            var result = await ApiClient.AddAccountAsync(new AddAccountRequest
            {
                PhoneNumber = newUser.PhoneNumber,
                FullName = newUser.FullName,
                RoleId = newUser.RoleId
            });

            if (result?.Success == true)
            {
                _showAddForm = false;
                newUser = new UserDto();
                await LoadData();
            }
            else
            {
                addMessage = result?.Message ?? "Account creation failed";
            }
        }
        catch (Exception ex)
        {
            addMessage = ex.Message;
        }
        finally
        {
            isAdding = false;
        }
    }

    private void StartEdit(UserDto user)
    {
        editUser = new UserDto
        {
            Id = user.Id,
            FullName = user.FullName,
            PhoneNumber = user.PhoneNumber,
            RoleId = user.RoleId,
            RoleName = user.RoleName,
            NeedChangePassword = user.NeedChangePassword
        };
    }

    private void CancelEdit()
    {
        editUser = null;
    }

    private async Task SaveEdit()
    {
        if (editUser is null)
        {
            return;
        }

        try
        {
            var ok = await ApiClient.UpdateUserAsync(editUser);
            if (!ok)
            {
                message = "Update failed";
                return;
            }
            editUser = null;
            await LoadData();
        }
        catch (Exception ex)
        {
            message = ex.Message;
        }
    }

    private async Task DeleteUser(int userId)
    {
        try
        {
            var result = await ApiClient.DeleteUserAsync(userId);
            if (result?.Success != true)
            {
                message = result?.Message ?? "Delete failed";
                return;
            }
            await LoadData();
        }
        catch (Exception ex)
        {
            message = ex.Message;
        }
    }

    private void OnPhoneInput(ChangeEventArgs e)
    {
        var raw = e?.Value?.ToString() ?? string.Empty;
        if (string.IsNullOrEmpty(raw))
        {
            newUser.PhoneNumber = string.Empty;
            return;
        }

        // Keep digits and at most one leading '+'. Remove other characters.
        var hasLeadingPlus = raw.StartsWith("+");
        var digitsOnly = new string(raw.Where(char.IsDigit).ToArray());
        var rebuilt = hasLeadingPlus ? "+" + digitsOnly : digitsOnly;

        // Limit to 15 total characters (E.164 max length)
        if (rebuilt.Length > 15)
        {
            rebuilt = rebuilt.Substring(0, 15);
        }

        newUser.PhoneNumber = rebuilt;
    }

    private static bool IsValidPhone(string? phone)
    {
        if (string.IsNullOrWhiteSpace(phone))
        {
            return false;
        }
        // E.164-like: optional leading '+', 10 to 15 digits
        return Regex.IsMatch(phone, @"^\+?\d{10,15}$");
    }
}


